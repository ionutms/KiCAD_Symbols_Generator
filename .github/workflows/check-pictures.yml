name: Check Pictures from Source Repo

on:
  repository_dispatch:
    types: [check_pictures]

jobs:
  check-and-save:
    runs-on: ubuntu-latest
    # Prevent concurrent runs - queue them instead
    concurrency:
      group: update-pictures
      cancel-in-progress: false
    
    steps:
      - name: Checkout target repo (KiCAD_Symbols_Generator)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TRAFIC_UPDATE_TOKEN }}
          fetch-depth: 0  # Fetch full history for better rebasing
      
      - name: Checkout source repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.source_repo }}
          ref: ${{ github.event.client_payload.source_ref }}
          token: ${{ secrets.TRAFIC_UPDATE_TOKEN }}
          path: source-repo
      
      - name: List pictures and update file
        run: |
          # Always work with the latest version
          git pull origin main
          
          PICTURES_PATH="source-repo/${{ github.event.client_payload.pictures_path }}"
          OUTPUT_FILE="app/pictures.txt"
          METADATA_FILE="app/.picture_metadata.txt"
          SOURCE_REPO="${{ github.event.client_payload.source_repo }}"
          TEMP_FILE="temp_pictures.txt"
          
          # Create app directory if it doesn't exist
          mkdir -p app
          
          # Get list of new pictures with repo prefix
          # Remove BOM and special characters
          if [ -d "$PICTURES_PATH" ]; then
            NEW_PICTURES=$(
              ls -1 "$PICTURES_PATH" | \
              sed 's/^\xEF\xBB\xBF//g' | \
              sed "s|^|$SOURCE_REPO:|"
            )
            FILE_COUNT=$(ls -1 "$PICTURES_PATH" | wc -l)
            echo "Found $FILE_COUNT files from $SOURCE_REPO"
          else
            NEW_PICTURES=""
            echo "Directory not found for $SOURCE_REPO"
          fi
          
          # Create or read metadata file
          touch "$METADATA_FILE"
          touch "$OUTPUT_FILE"
          
          # Remove old entries from this repo only
          # Keep everything else
          grep -v "^$SOURCE_REPO:" "$METADATA_FILE" > "$TEMP_FILE" \
            2>/dev/null || touch "$TEMP_FILE"
          
          # Add new entries
          if [ -n "$NEW_PICTURES" ]; then
            echo "$NEW_PICTURES" >> "$TEMP_FILE"
          fi
          
          # Sort by repo name, then by filename
          # Save metadata
          sort "$TEMP_FILE" > "$METADATA_FILE"
          
          # Generate output file with filenames
          # Grouped by repo with blank lines
          > "$OUTPUT_FILE"
          CURRENT_REPO=""
          while IFS=: read -r repo filename; do
            if [ -n "$repo" ] && [ -n "$filename" ]; then
              if [ "$CURRENT_REPO" != "$repo" ]; then
                if [ -n "$CURRENT_REPO" ]; then
                  echo "" >> "$OUTPUT_FILE"
                fi
                CURRENT_REPO="$repo"
              fi
              echo "$filename" >> "$OUTPUT_FILE"
            fi
          done < "$METADATA_FILE"
          
          rm -f "$TEMP_FILE"
      
      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add app/pictures.txt app/.picture_metadata.txt
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Commit changes
          git commit -m "Update pictures from ${{ github.event.client_payload.source_repo }}"
          
          # Push with retry logic
          max_attempts=5
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Push attempt $attempt of $max_attempts"
            
            if git push origin main; then
              echo "Successfully pushed changes"
              exit 0
            fi
            
            # Push failed, likely due to concurrent update
            echo "Push failed, pulling latest changes..."
            
            # Reset to before our commit
            git reset --soft HEAD~1
            
            # Pull latest changes
            git pull origin main
            
            # Re-process the pictures with the latest metadata
            PICTURES_PATH="source-repo/${{ github.event.client_payload.pictures_path }}"
            OUTPUT_FILE="app/pictures.txt"
            METADATA_FILE="app/.picture_metadata.txt"
            SOURCE_REPO="${{ github.event.client_payload.source_repo }}"
            TEMP_FILE="temp_pictures.txt"
            
            # Get list of new pictures
            if [ -d "$PICTURES_PATH" ]; then
              NEW_PICTURES=$(
                ls -1 "$PICTURES_PATH" | \
                sed 's/^\xEF\xBB\xBF//g' | \
                sed "s|^|$SOURCE_REPO:|"
              )
            else
              NEW_PICTURES=""
            fi
            
            # Remove old entries from this repo
            grep -v "^$SOURCE_REPO:" "$METADATA_FILE" > "$TEMP_FILE" \
              2>/dev/null || touch "$TEMP_FILE"
            
            # Add new entries
            if [ -n "$NEW_PICTURES" ]; then
              echo "$NEW_PICTURES" >> "$TEMP_FILE"
            fi
            
            # Sort and save
            sort "$TEMP_FILE" > "$METADATA_FILE"
            
            # Regenerate output file
            > "$OUTPUT_FILE"
            CURRENT_REPO=""
            while IFS=: read -r repo filename; do
              if [ -n "$repo" ] && [ -n "$filename" ]; then
                if [ "$CURRENT_REPO" != "$repo" ]; then
                  if [ -n "$CURRENT_REPO" ]; then
                    echo "" >> "$OUTPUT_FILE"
                  fi
                  CURRENT_REPO="$repo"
                fi
                echo "$filename" >> "$OUTPUT_FILE"
              fi
            done < "$METADATA_FILE"
            
            rm -f "$TEMP_FILE"
            
            # Stage and commit again
            git add app/pictures.txt app/.picture_metadata.txt
            
            if git diff --staged --quiet; then
              echo "No changes after merge - already up to date"
              exit 0
            fi
            
            git commit -m "Update pictures from ${{ github.event.client_payload.source_repo }}"
            
            attempt=$((attempt + 1))
            
            if [ $attempt -le $max_attempts ]; then
              echo "Retrying in 3 seconds..."
              sleep 3
            fi
          done
          
          echo "Failed to push after $max_attempts attempts"
          exit 1