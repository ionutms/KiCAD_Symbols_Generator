name: Check Pictures from Source Repo

on:
  repository_dispatch:
    types: [check_pictures]

jobs:
  check-and-save:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repo (KiCAD_Symbols_Generator)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TRAFIC_UPDATE_TOKEN }}
      
      - name: Checkout source repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.source_repo }}
          ref: ${{ github.event.client_payload.source_ref }}
          token: ${{ secrets.TRAFIC_UPDATE_TOKEN }}
          path: source-repo
      
      - name: List pictures and update file
        run: |
          PICTURES_PATH="source-repo/${{ github.event.client_payload.pictures_path }}"
          OUTPUT_FILE="picture_names.txt"
          SOURCE_REPO="${{ github.event.client_payload.source_repo }}"
          TEMP_FILE="temp_pictures.txt"
          REPO_DATA_FILE="repo_pictures_data.tmp"
          
          # Get list of new pictures with repo prefix
          if [ -d "$PICTURES_PATH" ]; then
            NEW_PICTURES=$(ls -1 "$PICTURES_PATH" | sed "s|^|$SOURCE_REPO:|")
            echo "Found $(echo "$NEW_PICTURES" | wc -l) files from $SOURCE_REPO"
          else
            NEW_PICTURES=""
            echo "Directory not found for $SOURCE_REPO"
          fi
          
          # If output file exists, read existing data and update
          if [ -f "$OUTPUT_FILE" ]; then
            # Convert existing file to repo:filename format (if not already)
            if grep -q ":" "$OUTPUT_FILE"; then
              cat "$OUTPUT_FILE" > "$REPO_DATA_FILE"
            else
              # Old format without repo prefix, skip it
              echo "" > "$REPO_DATA_FILE"
            fi
            
            # Remove old entries from this repo
            grep -v "^$SOURCE_REPO:" "$REPO_DATA_FILE" > "$TEMP_FILE" || true
            
            # Add new entries
            echo "$NEW_PICTURES" >> "$TEMP_FILE"
            
            # Sort by repo name, then by filename, and output only filenames
            sort "$TEMP_FILE" | awk -F: '{print $2}' > "$OUTPUT_FILE"
            
            rm -f "$TEMP_FILE" "$REPO_DATA_FILE"
          else
            # Create new file
            echo "$NEW_PICTURES" | awk -F: '{print $2}' > "$OUTPUT_FILE"
          fi
      
      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add picture_names.txt
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update picture names from ${{ github.event.client_payload.source_repo }}" && git push)